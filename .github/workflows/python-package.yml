# This workflow will install Python dependencies, run tests and lint with a variety of Python versions 
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on: [ push ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        include:
          - python-version: "3.10"
            numpy-version: "2.1.3"

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - if: ${{ matrix.numpy-version}}
      run: python -m pip install numpy==${{ matrix.numpy-version }}

    - name: Install
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        #python -m pip install mdtraj # removed as long as mdtraj is not supporting numpy2
        python -m build
        python -m pip install dist/*.whl

    #- name: Lint with flake8
     # run: |
     #   # stop the build if there are Python syntax errors or undefined names
     #   flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
     #   # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
     #   flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
         pytest pytim/ --doctest-modules
         
    - name: Clone pytim-notebooks
      run: |
        git clone https://github.com/YOUR_USERNAME/pytim-notebooks.git

    - name: Install dependencies for pytim-notebooks
      run: |
        cd pytim-notebooks
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test pytim-notebooks
      run: |
        cd pytim-notebooks
        IFS=$(echo -ne "\n\b") ; 
        for notebook in $(find . -name "*.ipynb"); do
          echo "Running $notebook"
          jupyter nbconvert --to notebook --execute "$notebook" --output /dev/null
        done
